# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q3ovoVBFRvc8kvMBLoFt_vjwfcSlF26X
"""

#Import the libraries
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

#load the data
from google.colab import files
upload=files.upload()

#store the data
df=pd.read_csv('imdb_top_1000.csv')
#show the first 3 rows of data
df.head(3)

#get a count of the number of row/movies in the data set and the number of columns
df.shape

#create a list of important columns for the recommendation engine
columns=['Star1','Star2','Star3','Star4','Director','Genre','Series_Title']

#show the data
df[columns].head(3)

#check for any missing values in the imported columns
df[columns].isnull().values.any()

#create a function to combine the values of the important columns into a single string
def get_important_features(data):
  important_features=[]
  for i in range(0,data.shape[0]):
    important_features.append(data['Star1'][i]+' '+data['Star2'][i]+' '+data['Star3'][i]+' '+data['Star4'][i]+' '+data['Director'][i]+' '+data['Genre'][i]+' '+data['Series_Title'][i])
  return important_features

#create a column to hold the combined strings
df['important_features']=get_important_features(df)

#show the data
df.head(3)

#convert the text to a matrix of token counts

cm=CountVectorizer().fit_transform(df['important_features'])

#get the cosine similarity matrix from the count matrix
cs=cosine_similarity(cm)
print(cs)

cs.shape

#get the title of the movie that the user likes
Seriestitle='The Dark Knight'
movie_id =df[df.Series_Title==Seriestitle]['movie_id'].values[0]

scores=list(enumerate(cs[movie_id]))

sorted_scores=sorted(scores,key=lambda x:x[1],reverse =True)
sorted_scores=sorted_scores[1:]

#print the sorted scores
print(sorted_scores)

#create a loop to print the first 7 similar movies
j=0
print('the 7 most recommended movies to', Seriestitle, 'are:\n')
for item in sorted_scores:
  movie_title=df[df.movie_id==item[0]]['Series_Title'].values[0]
  print(j+1,movie_title)
  j=j+1
  if j>6:
    break